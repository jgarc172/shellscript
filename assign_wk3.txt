1. Design the algorithm and write the pseudocode for the steps of this algorithm that does the following:

- A welcome message indicating your name (the user).

algorithm:
    * identify the current user using any available variable
    * display a welcome message to the current user
pseudocode:
    * use $LOGNAME
    * set msg = "Welcome $LOGNAME"
    * print msg

- The host computer you are logged in.

algorithm:
    * identify the name of the host computer using any available variable
    * display the name of the host computer
pseudocode:
    * use $HOSTNAME
    * set msg = "You are logged in to $HOSTNAME"
    * print msg

- The date and time you last logged in, not including this time. (Try last -2 $LOGNAME (If this is the first time 
  you have logged in to this system, it is acceptable for the output to indicate the last login is the current login session.))

aalgorithm:
    * obtain the two most recent log in sessions for the current user using the command 'last'
    * to remove the footer of 'last' select lines matching the current user using 'grep'
    * to clean the columns, replace whitespace with a single space using 'tr'
    * select the columns that contain the date and time using 'cut'
    * count the number of lines using 'wc'
    * if there is only one line then select the first line using 'sed'
    * if there are two lines then select the second line using 'sed'
    * display a message that includes the date and time
pseudocode:
    * sessions = last two login sessions for current user using 'last'
    * sessions = print $sessions | select lines that contain $LOGNAME with 'grep'
    * sessions = print $sessions | remove whitespace with 'tr'
    * sessions = print $sessions | select date time fields with 'cut'
    * count = print $sessions | count lines with 'wc'
    * if count == 1
        login_date = print $sessions | select first line using 'sed'
      else
        login_date = print $sessions | select second line using 'sed'
    * set msg = "You last logged in on login_date"
    * print msg

- Displays how many local (non-environment) and environment variables you have defined. (This requires arithmetic.)

algorithm:
    1 count the number of variables in the output of 'env' or 'printenv'
    2 count the number of variables in the output of 'set'
    3 subtract the count in step 1 from the count in step 2
    4 display a message that includes the counts in step 3 and step 1
pseudocode:
    * set count_env = the number of lines from 'env'
    * set count_all = the number of lines from 'set'
    * set count_non = count_all - count_env
    * set msg = "Variables - non-environment: $count_non , environment: $count_env"
    * print msg

- Displays the directories in your search path, in the order they are searched, one-per-line.

algorithm:
    * create a string list from $PATH and replace ":" with a space
    * for each directory in the list 
        - display the directory
pseudocode:
    * set dirs = print $PATH | replace ":" with a space using 'tr'
    * for dir in $dirs
    *   print dir
2. Takes three valid integers from the user. Make sure they are valid.

algorithm:
    * prompt the user to enter three integers
    * read the entered values and assign them to variables
    * for each variable validate that the value is an integers
    * display to the user when any of the values is not an integers
pseudocode:
    * print "enter three integers separated by a space"
    * read int1 int2 int3
    INT if int1 doesn't match 1 or more digits with or without '-' then
            print "int1 is not a valid integer"
    repeat step INT

3. Finds the largest and smallest number of the three integers.

4. Performs the following on each combination of two from the three numbers and display the results; Addition, subtraction, multiplication and division.

5. Reports that the script is done and exits.