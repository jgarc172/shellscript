part 1
list only the names that match the indicated pattern.
1. all hidden names
    .??*
2. ends with a digit
    *[[:digit:]]
3. contains at least one character that is not alphabetic
    *[![:alph:]]*
4. starts with a dash
    -*    ls -- -*
5. contains an asterisk, dash, question mark, or comma
    *[-*?,]*  ls -- *[-*?,]*
6. is in a subdirectory
    */*

part 2
1. output the first 15 lines of the file passwd
    head -15 passwd
2. output the last 10 lines of the file passwd
    tail passwd
3. output lines 20-30 of the file passwd with the correct line numbers (starting at 20)
    cat -n | head -30 passwd | tail -11
4. how many unique GIDs are there in the file passwd?
    cut -d: -f4 passwd | uniq | wc -l
5. how many lines in the file passwd have a directory of / (the root of the filesystem)?
    cut -d: -f6 passwd | grep -wc /
6. how many lines in passwd have an account that ends with a number?
    cut -d: -f2 passwd | grep -c *[[:digit:]]
7. create a new file gids that contains the GID and group_name from the group file in that order
separated by a tab
    cut -d: -f1,3 group | tr ":" "\t" > gids
8. sort the passwd file on the GID. For lines with identical GIDs, sort it on the UID.
    sort -t":" -k4n -k3n passwd
9. output the current users default GID from the output of the id command.
    id -g
10.output the ip address of hills from the output of the command ifconfig bond0
    ifconfig ens192 | grep -w inet | cut -d=' ' -f2

part 3
1. output the lines from the passwd file whose GID is 574
    :574: prededed by 2 groups of <0 or more characters except : >:<0 or more characters except : >
        grep -E '^([^:]*:[^:]*){2}:574:' passwd
    or
    574: prededed by 3 groups of <0 or more characters except : >: 
        grep -E '^([^:]*:){3}574:' passwd
        grep -E '[[:digit:]]:574:' passwd
2. The GID 574 must be changed to 579. Output the lines from the passwd file changed as indicated.
(Only output the lines that changed)
    match the lines with the UID column with at least one digit next to ':' and the GID column has 574
    keep the UID column the same (\1) and replace the rest with 579
        sed -n 's/\([[:digit:]]:\)574:/\1579:/p' passwd 
3. output the lines from the passwd file whose UID is less than 1000? greater than 1000?
    match the lines with the UID values that are 1 to 3 digits
        grep -E ':[[:digit:]]{1,3}:[[:digit:]]' passwd
    match the lines with the UID values that are 3 or more digits
        grep -E ':[[:digit:]]{3,}:[[:digit:]]' passwd
4. how many groups in the group file begin with c3?
    grep -c '^c3*' group
5. how many groups in the group file have a single member in their member_list? (the
member_list is comma-separated)
    count the lines that match the last column with any number of characters except ','
    grep -cE ':[^:,]+$' group
6. output the group file after deleting the passwd field
7. how many users are members of at least one group in the group file (unique users)
8. output the ip address of hills from the output of the command ifconfig bond0 using sed.

command substitution
1. Output a message that indicates what directory you are in.
    echo "my current directory: $(pwd)"
2. Output a message that indicates today's date. 
    echo today is $(echo $(date) | cut -d" " -f1,2,3,6)
3. Using the two variables and command substitution, output a message like:
   30 + 50 = 80 

   num1=30 num2=50
   echo $num1 + $num2 = $(($num1 + $num2))

4. output a message like:
    The remainder of num2/num1 is 20 

    echo The remainder of num2/num1 is $(($num2 % $num1))

5. Retrieve the single line from the file /etc/passwd that contains your login information and place it
    in a variable pword

    pword=$(grep jlg /etc/passwd)

6. output a message that announces what your login shell is. 

    echo "your login shell is $(echo $pword | cut -d: -f7)"

7. output the message
    <the current user>'s home directory is '<the current user's home dir>' 

    user=$(echo $pword | cut -d: -f1)
    home=$(echo $pword | cut -d: -f6)
    echo "${user}'s home directory is $home"

8.  time=$(echo $(date) | cut -d" " -f4 | cut -d: -f1)
    echo "There are $((24 - $time)) hours until midnight"

9. Output a message that indicates how many lines in
   Hired_Data have the Job Manager 

    mgrs=$(cut -d: -f3 Hired_Data | grep -c Manager)
    echo There are $mgrs managers

10. Output a message that indicates today's date in the format
    Fri 30 July
    
    wkday=$(echo $(date) | cut -d" " -f1)
    month=$(echo $(date) | cut -d" " -f2)
    day=$(echo $(date) | cut -d" " -f3)
    echo "Today's date is $wkday $day $month"

11. 